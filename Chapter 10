import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Arrays;
import java.util.Scanner;

public class ProblemsSolver {

    // 10.1 Time class
    static class Time {
        private int hour, minute, second;

        public Time() {
            long currentTime = System.currentTimeMillis();
            setTime(currentTime);
        }

        public Time(long elapsedTime) {
            setTime(elapsedTime);
        }

        public Time(int hour, int minute, int second) {
            this.hour = hour;
            this.minute = minute;
            this.second = second;
        }

        public int getHour() { return hour; }
        public int getMinute() { return minute; }
        public int getSecond() { return second; }

        public void setTime(long elapsedTime) {
            long totalSeconds = elapsedTime / 1000;
            this.second = (int) (totalSeconds % 60);
            long totalMinutes = totalSeconds / 60;
            this.minute = (int) (totalMinutes % 60);
            this.hour = (int) ((totalMinutes / 60) % 24);
        }

        @Override
        public String toString() {
            return String.format("%d:%d:%d", hour, minute, second);
        }
    }

    // 10.2 BMI class
    static class BMI {
        private String name;
        private int age;
        private double weight; // in pounds
        private double height; // in inches

        public BMI(String name, int age, double weight, double feet, double inches) {
            this.name = name;
            this.age = age;
            this.weight = weight;
            this.height = feet * 12 + inches;
        }

        public double getBMI() {
            return weight * 703 / (height * height);
        }
    }

    // 10.3 MyInteger class
    static class MyInteger {
        private int value;

        public MyInteger(int value) { this.value = value; }
        public int getValue() { return value; }

        public boolean isEven() { return value % 2 == 0; }
        public boolean isOdd() { return !isEven(); }
        public boolean isPrime() {
            if (value <= 1) return false;
            for (int i = 2; i <= Math.sqrt(value); i++)
                if (value % i == 0) return false;
            return true;
        }

        public static boolean isEven(int value) { return value % 2 == 0; }
        public static boolean isOdd(int value) { return !isEven(value); }
        public static boolean isPrime(int value) {
            if (value <= 1) return false;
            for (int i = 2; i <= Math.sqrt(value); i++)
                if (value % i == 0) return false;
            return true;
        }

        public static boolean isEven(MyInteger mi) { return mi.isEven(); }
        public static boolean isOdd(MyInteger mi) { return mi.isOdd(); }
        public static boolean isPrime(MyInteger mi) { return mi.isPrime(); }

        public boolean equals(int value) { return this.value == value; }
        public boolean equals(MyInteger mi) { return this.value == mi.value; }

        public static int parseInt(char[] chars) { return Integer.parseInt(new String(chars)); }
        public static int parseInt(String s) { return Integer.parseInt(s); }
    }

    // 10.4 MyPoint class
    static class MyPoint {
        private double x, y;

        public MyPoint() { this(0, 0); }
        public MyPoint(double x, double y) { this.x = x; this.y = y; }

        public double getX() { return x; }
        public double getY() { return y; }

        public double distance(MyPoint p) {
            return Math.sqrt(Math.pow(x - p.x, 2) + Math.pow(y - p.y, 2));
        }

        public double distance(double x, double y) {
            return Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2));
        }

        public static double distance(MyPoint p1, MyPoint p2) {
            return p1.distance(p2);
        }
    }

    // 10.5 Prime factors
    static class StackOfIntegers {
        private int[] elements;
        private int size;

        public StackOfIntegers() {
            elements = new int[16];
            size = 0;
        }

        public void push(int value) {
            if (size >= elements.length) {
                int[] temp = new int[elements.length * 2];
                System.arraycopy(elements, 0, temp, 0, elements.length);
                elements = temp;
            }
            elements[size++] = value;
        }

        public int pop() { return elements[--size]; }
        public boolean empty() { return size == 0; }
        public int getSize() { return size; }
    }

    static void displayPrimeFactors(int number) {
        StackOfIntegers stack = new StackOfIntegers();
        int factor = 2;
        while (number > 1) {
            if (number % factor == 0) {
                stack.push(factor);
                number /= factor;
            } else {
                factor++;
            }
        }
        while (!stack.empty()) {
            System.out.print(stack.pop() + " ");
        }
        System.out.println();
    }

    // 10.6 Prime numbers < 120 in decreasing order
    static void displayPrimesLessThan120() {
        StackOfIntegers stack = new StackOfIntegers();
        for (int i = 2; i < 120; i++) {
            if (MyInteger.isPrime(i)) stack.push(i);
        }
        while (!stack.empty()) {
            System.out.print(stack.pop() + " ");
        }
        System.out.println();
    }

    // 10.7 ATM simulation (Account class)
    static class Account {
        private int id;
        private double balance;

        public Account(int id, double balance) {
            this.id = id;
            this.balance = balance;
        }

        public void withdraw(double amount) { balance -= amount; }
        public void deposit(double amount) { balance += amount; }
        public double getBalance() { return balance; }
        public int getId() { return id; }
    }

    static void simulateATM() {
        Account[] accounts = new Account[10];
        for (int i = 0; i < 10; i++) accounts[i] = new Account(i, 100.0);
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.print("Enter an id: ");
            int id = scanner.nextInt();
            if (id < 0 || id >= 10) continue;
            while (true) {
                System.out.println("Main menu\n1: check balance\n2: withdraw\n3: deposit\n4: exit");
                System.out.print("Enter a choice: ");
                int choice = scanner.nextInt();
                if (choice == 4) break;
                switch (choice) {
                    case 1:
                        System.out.println("The balance is " + accounts[id].getBalance());
                        break;
                    case 2:
                        System.out.print("Enter an amount to withdraw: ");
                        accounts[id].withdraw(scanner.nextDouble());
                        break;
                    case 3:
                        System.out.print("Enter an amount to deposit: ");
                        accounts[id].deposit(scanner.nextDouble());
                        break;
                }
            }
        }
    }

    // 10.8 Tax class
    static class Tax {
        public static final int SINGLE_FILER = 0;
        public static final int MARRIED_JOINTLY_OR_QUALIFYING_WIDOW = 1;
        public static final int MARRIED_SEPARATELY = 2;
        public static final int HEAD_OF_HOUSEHOLD = 3;

        private int filingStatus;
        private int[][] brackets;
        private double[] rates;
        private double taxableIncome;

        public Tax() {}
        
        public Tax(int filingStatus, int[][] brackets, double[] rates, double taxableIncome) {
            this.filingStatus = filingStatus;
            this.brackets = brackets;
            this.rates = rates;
            this.taxableIncome = taxableIncome;
        }

        public double getTax() {
            double tax = 0;
            int[] bracket = brackets[filingStatus];
            for (int i = rates.length - 1; i >= 0; i--) {
                if (taxableIncome > bracket[i]) {
                    tax += (taxableIncome - bracket[i]) * rates[i + 1];
                    taxableIncome = bracket[i];
                }
            }
            tax += taxableIncome * rates[0];
            return tax;
        }

        // Getters and setters omitted for brevity
    }

    // 10.9 Course class
    static class Course {
        private String courseName;
        private String[] students;
        private int numberOfStudents;

        public Course(String courseName) {
            this.courseName = courseName;
            students = new String[10];
        }

        public void addStudent(String student) {
            if (numberOfStudents >= students.length) {
                String[] temp = new String[students.length * 2];
                System.arraycopy(students, 0, temp, 0, students.length);
                students = temp;
            }
            students[numberOfStudents++] = student;
        }

        public void dropStudent(String student) {
            for (int i = 0; i < numberOfStudents; i++) {
                if (students[i].equals(student)) {
                    System.arraycopy(students, i + 1, students, i, numberOfStudents - i - 1);
                    numberOfStudents--;
                    break;
                }
            }
        }

        public String[] getStudents() {
            return Arrays.copyOf(students, numberOfStudents);
        }

        public void clear() { numberOfStudents = 0; }
    }

    // 10.10 Queue class
    static class Queue {
        private int[] elements;
        private int size;

        public Queue() {
            elements = new int[8];
            size = 0;
        }

        public void enqueue(int v) {
            if (size >= elements.length) {
                int[] temp = new int[elements.length * 2];
                System.arraycopy(elements, 0, temp, 0, size);
                elements = temp;
            }
            elements[size++] = v;
        }

        public int dequeue() {
            int result = elements[0];
            System.arraycopy(elements, 1, elements, 0, --size);
            return result;
        }

        public boolean empty() { return size == 0; }
        public int getSize() { return size; }
    }

    // 10.11 Circle2D class
    static class Circle2D {
        private double x, y, radius;

        public Circle2D() { this(0, 0, 1); }
        public Circle2D(double x, double y, double radius) {
            this.x = x;
            this.y = y;
            this.radius = radius;
        }

        public double getX() { return x; }
        public double getY() { return y; }
        public double getRadius() { return radius; }

        public double getArea() { return Math.PI * radius * radius; }
        public double getPerimeter() { return 2 * Math.PI * radius; }

        public boolean contains(double x, double y) {
            return Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2)) <= radius;
        }

        public boolean contains(Circle2D circle) {
            double dist = Math.sqrt(Math.pow(this.x - circle.x, 2) + Math.pow(this.y - circle.y, 2));
            return dist + circle.radius <= this.radius;
        }

        public boolean overlaps(Circle2D circle) {
            double dist = Math.sqrt(Math.pow(this.x - circle.x, 2) + Math.pow(this.y - circle.y, 2));
            return dist < this.radius + circle.radius;
        }
    }

    // 10.12 Triangle2D class
    static class Triangle2D {
        private MyPoint p1, p2, p3;

        public Triangle2D() { this(new MyPoint(0, 0), new MyPoint(1, 1), new MyPoint(2, 5)); }
        public Triangle2D(MyPoint p1, MyPoint p2, MyPoint p3) {
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
        }

        public double getArea() {
            return Math.abs((p1.getX() * (p2.getY() - p3.getY()) + p2.getX() * (p3.getY() - p1.getY()) + 
                            p3.getX() * (p1.getY() - p2.getY())) / 2);
        }

        public double getPerimeter() {
            return p1.distance(p2) + p2.distance(p3) + p3.distance(p1);
        }

        public boolean contains(MyPoint p) {
            double area = getArea();
            Triangle2D t1 = new Triangle2D(p1, p2, p);
            Triangle2D t2 = new Triangle2D(p2, p3, p);
            Triangle2D t3 = new Triangle2D(p3, p1, p);
            return Math.abs(t1.getArea() + t2.getArea() + t3.getArea() - area) < 0.0001;
        }

        public boolean contains(Triangle2D t) {
            return contains(t.p1) && contains(t.p2) && contains(t.p3);
        }

        public boolean overlaps(Triangle2D t) {
            return contains(t.p1) || contains(t.p2) || contains(t.p3) ||
                   t.contains(p1) || t.contains(p2) || t.contains(p3);
        }
    }

    // 10.13 MyRectangle2D class
    static class MyRectangle2D {
        private double x, y, width, height;

        public MyRectangle2D() { this(0, 0, 1, 1); }
        public MyRectangle2D(double x, double y, double width, double height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }

        public double getArea() { return width * height; }
        public double getPerimeter() { return 2 * (width + height); }

        public boolean contains(double x, double y) {
            return x >= this.x - width / 2 && x <= this.x + width / 2 &&
                   y >= this.y - height / 2 && y <= this.y + height / 2;
        }

        public boolean contains(MyRectangle2D r) {
            return contains(r.x - r.width / 2, r.y - r.height / 2) &&
                   contains(r.x + r.width / 2, r.y + r.height / 2);
        }

        public boolean overlaps(MyRectangle2D r) {
            return Math.abs(this.x - r.x) <= (this.width + r.width) / 2 &&
                   Math.abs(this.y - r.y) <= (this.height + r.height) / 2;
        }
    }

    // 10.14 MyDate class
    static class MyDate {
        private int year, month, day;

        public MyDate() {
            GregorianCalendar cal = new GregorianCalendar();
            this.year = cal.get(Calendar.YEAR);
            this.month = cal.get(Calendar.MONTH);
            this.day = cal.get(Calendar.DAY_OF_MONTH);
        }

        public MyDate(long elapsedTime) { setDate(elapsedTime); }
        public MyDate(int year, int month, int day) {
            this.year = year;
            this.month = month;
            this.day = day;
        }

        public int getYear() { return year; }
        public int getMonth() { return month; }
        public int getDay() { return day; }

        public void setDate(long elapsedTime) {
            GregorianCalendar cal = new GregorianCalendar();
            cal.setTimeInMillis(elapsedTime);
            this.year = cal.get(Calendar.YEAR);
            this.month = cal.get(Calendar.MONTH);
            this.day = cal.get(Calendar.DAY_OF_MONTH);
        }
    }

    // 10.15 Bounding rectangle
    static MyRectangle2D getRectangle(double[][] points) {
        double minX = points[0][0], maxX = points[0][0];
        double minY = points[0][1], maxY = points[0][1];
        for (int i = 1; i < points.length; i++) {
            minX = Math.min(minX, points[i][0]);
            maxX = Math.max(maxX, points[i][0]);
            minY = Math.min(minY, points[i][1]);
            maxY = Math.max(maxY, points[i][1]);
        }
        double width = maxX - minX;
        double height = maxY - minY;
        return new MyRectangle2D((minX + maxX) / 2, (minY + maxY) / 2, width, height);
    }

    // 10.16 Divisible by 2 or 3
    static void divisibleBy2Or3() {
        BigInteger num = new BigInteger("10").pow(50);
        int count = 0;
        while (count < 10) {
            if (num.mod(BigInteger.valueOf(2)).equals(BigInteger.ZERO) ||
                num.mod(BigInteger.valueOf(3)).equals(BigInteger.ZERO)) {
                System.out.println(num);
                count++;
            }
            num = num.add(BigInteger.ONE);
        }
    }

    // 10.17 Square numbers > Long.MAX_VALUE
    static void squareNumbers() {
        BigInteger max = BigInteger.valueOf(Long.MAX_VALUE);
        BigInteger n = new BigInteger("3037000499"); // Approx sqrt(Long.MAX_VALUE)
        int count = 0;
        while (count < 10) {
            BigInteger square = n.multiply(n);
            if (square.compareTo(max) > 0) {
                System.out.println(square);
                count++;
            }
            n = n.add(BigInteger.ONE);
        }
    }

    // 10.18 Large prime numbers
    static void largePrimes() {
        BigInteger num = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);
        int count = 0;
        while (count < 5) {
            if (num.isProbablePrime(10)) {
                System.out.println(num);
                count++;
            }
            num = num.add(BigInteger.ONE);
        }
    }

    // 10.19 Mersenne primes
    static void mersennePrimes() {
        System.out.println("p 2^p - 1");
        System.out.println("---------------------");
        for (int p = 2; p <= 100; p++) {
            BigInteger mersenne = BigInteger.valueOf(2).pow(p).subtract(BigInteger.ONE);
            if (mersenne.isProbablePrime(10)) {
                System.out.println(p + " " + mersenne);
            }
        }
    }

    // 10.20 Approximate e (Updated to use RoundingMode)
    static void approximateE() {
        BigDecimal e = BigDecimal.ZERO;
        BigDecimal one = BigDecimal.ONE;
        for (int i = 0; i <= 1000; i += 100) {
            e = BigDecimal.ZERO;
            for (int j = 0; j <= i; j++) {
                BigDecimal factorial = one;
                for (int k = 1; k <= j; k++) {
                    factorial = factorial.multiply(BigDecimal.valueOf(k));
                }
                e = e.add(one.divide(factorial, 25, RoundingMode.HALF_UP));
            }
            System.out.println("e for i = " + i + ": " + e);
        }
    }

    // 10.21 Divisible by 5 or 6
    static void divisibleBy5Or6() {
        BigInteger num = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);
        int count = 0;
        while (count < 10) {
            if (num.mod(BigInteger.valueOf(5)).equals(BigInteger.ZERO) ||
                num.mod(BigInteger.valueOf(6)).equals(BigInteger.ZERO)) {
                System.out.println(num);
                count++;
            }
            num = num.add(BigInteger.ONE);
        }
    }

    // 10.22 MyString1 class
    static class MyString1 {
        private char[] chars;

        public MyString1(char[] chars) { this.chars = chars.clone(); }
        public char charAt(int index) { return chars[index]; }
        public int length() { return chars.length; }
        public MyString1 substring(int begin, int end) {
            char[] sub = new char[end - begin];
            System.arraycopy(chars, begin, sub, 0, end - begin);
            return new MyString1(sub);
        }
        public MyString1 toLowerCase() {
            char[] lower = chars.clone();
            for (int i = 0; i < lower.length; i++) lower[i] = Character.toLowerCase(lower[i]);
            return new MyString1(lower);
        }
        public boolean equals(MyString1 s) { return Arrays.equals(chars, s.chars); }
        public static MyString1 valueOf(int i) {
            return new MyString1(String.valueOf(i).toCharArray());
        }

        @Override
        public String toString() { return new String(chars); }
    }

    // 10.23 MyString2 class
    static class MyString2 {
        private String s;

        public MyString2(String s) { this.s = s; }
        public int compare(String s) { return this.s.compareTo(s); }
        public MyString2 substring(int begin) { return new MyString2(s.substring(begin)); }
        public MyString2 toUpperCase() { return new MyString2(s.toUpperCase()); }
        public char[] toChars() { return s.toCharArray(); }
        public static MyString2 valueOf(boolean b) { return new MyString2(String.valueOf(b)); }
    }

    // 10.24 MyCharacter class
    static class MyCharacter {
        private char value;

        public MyCharacter(char value) { this.value = value; }
        public char charValue() { return value; }
        public static boolean isDigit(char ch) { return Character.isDigit(ch); }
    }

    // 10.25 New string split method
    static String[] split(String s, String regex) {
        if (regex.equals("#") || regex.equals("[?#]")) {
            java.util.List<String> result = new java.util.ArrayList<>();
            int start = 0;
            for (int i = 0; i < s.length(); i++) {
                if (regex.equals("#") && s.charAt(i) == '#') {
                    result.add(s.substring(start, i));
                    result.add("#");
                    start = i + 1;
                } else if (regex.equals("[?#]") && (s.charAt(i) == '?' || s.charAt(i) == '#')) {
                    result.add(s.substring(start, i));
                    result.add(String.valueOf(s.charAt(i)));
                    start = i + 1;
                }
            }
            if (start < s.length()) result.add(s.substring(start));
            return result.toArray(new String[0]);
        }
        return s.split(regex);
    }

    // 10.26 Calculator
    static int calculate(String expression) {
        String[] parts = expression.split("\\s+");
        int a = Integer.parseInt(parts[0]);
        String op = parts[1];
        int b = Integer.parseInt(parts[2]);
        switch (op) {
            case "+": return a + b;
            case "-": return a - b;
            case "*": return a * b;
            case "/": return a / b;
            default: throw new IllegalArgumentException("Invalid operator");
        }
    }

    // 10.27 MyStringBuilder1 class
    static class MyStringBuilder1 {
        private String s;

        public MyStringBuilder1(String s) { this.s = s; }
        public MyStringBuilder1 append(MyStringBuilder1 s) { return new MyStringBuilder1(this.s + s.s); }
        public MyStringBuilder1 append(int i) { return new MyStringBuilder1(this.s + i); }
        public int length() { return s.length(); }
        public char charAt(int index) { return s.charAt(index); }
        public MyStringBuilder1 toLowerCase() { return new MyStringBuilder1(s.toLowerCase()); }
        public MyStringBuilder1 substring(int begin, int end) { return new MyStringBuilder1(s.substring(begin, end)); }
        public String toString() { return s; }
    }

    // 10.28 MyStringBuilder2 class
    static class MyStringBuilder2 {
        private char[] chars;
        private int size;

        public MyStringBuilder2() { chars = new char[16]; size = 0; }
        public MyStringBuilder2(char[] chars) { this.chars = chars.clone(); size = chars.length; }
        public MyStringBuilder2(String s) { this(s.toCharArray()); }

        public MyStringBuilder2 insert(int offset, MyStringBuilder2 s) {
            char[]

 newChars = new char[size + s.size];
            System.arraycopy(chars, 0, newChars, 0, offset);
            System.arraycopy(s.chars, 0, newChars, offset, s.size);
            System.arraycopy(chars, offset, newChars, offset + s.size, size - offset);
            return new MyStringBuilder2(newChars);
        }

        public MyStringBuilder2 reverse() {
            char[] reversed = new char[size];
            for (int i = 0; i < size; i++) reversed[i] = chars[size - 1 - i];
            return new MyStringBuilder2(reversed);
        }

        public MyStringBuilder2 substring(int begin) {
            char[] sub = new char[size - begin];
            System.arraycopy(chars, begin, sub, 0, size - begin);
            return new MyStringBuilder2(sub);
        }

        public MyStringBuilder2 toUpperCase() {
            char[] upper = chars.clone();
            for (int i = 0; i < size; i++) upper[i] = Character.toUpperCase(upper[i]);
            return new MyStringBuilder2(upper);
        }

        @Override
        public String toString() { return new String(chars, 0, size); }
    }

    public static void main(String[] args) {
        // Test 10.1
        Time t1 = new Time();
        Time t2 = new Time(555550000);
        Time t3 = new Time(5, 23, 55);
        System.out.println("10.1: " + t1 + ", " + t2 + ", " + t3);

        // Test 10.2
        BMI bmi = new BMI("John", 20, 150, 5, 10);
        System.out.println("10.2 BMI: " + bmi.getBMI());

        // Test 10.3
        MyInteger mi = new MyInteger(7);
        System.out.println("10.3: isPrime(7): " + mi.isPrime() + ", equals(7): " + mi.equals(7));

        // Test 10.4
        MyPoint p1 = new MyPoint(0, 0);
        MyPoint p2 = new MyPoint(10, 30.5);
        System.out.println("10.4 Distance: " + p1.distance(p2));

        // Test 10.5
        System.out.print("10.5 Prime factors of 120: ");
        displayPrimeFactors(120);

        // Test 10.6
        System.out.print("10.6 Primes < 120: ");
        displayPrimesLessThan120();

        // Test 10.7 (simulated)
        Account[] accounts = new Account[10];
        for (int i = 0; i < 10; i++) accounts[i] = new Account(i, 100.0);
        accounts[4].withdraw(3);
        accounts[4].deposit(10);
        System.out.println("10.7 Balance for id 4: " + accounts[4].getBalance());

        // Test 10.9
        Course course = new Course("Java");
        course.addStudent("Alice");
        course.addStudent("Bob");
        System.out.println("10.9 Students: " + Arrays.toString(course.getStudents()));

        // Test 10.10
        Queue q = new Queue();
        for (int i = 1; i <= 20; i++) q.enqueue(i);
        System.out.print("10.10 Queue: ");
        while (!q.empty()) System.out.print(q.dequeue() + " ");
        System.out.println();

        // Test 10.11
        Circle2D c1 = new Circle2D(2, 2, 5.5);
        System.out.println("10.11 Area: " + c1.getArea() + ", Contains (3,3): " + c1.contains(3, 3));

        // Test 10.12 (Updated to avoid duplicate variable name)
        Triangle2D triangle = new Triangle2D(new MyPoint(2.5, 2), new MyPoint(4.2, 3), new MyPoint(5, 3.5));
        System.out.println("10.12 Area: " + triangle.getArea());

        // Test 10.13
        MyRectangle2D r1 = new MyRectangle2D(2, 2, 5.5, 4.9);
        System.out.println("10.13 Area: " + r1.getArea() + ", Contains (3,3): " + r1.contains(3, 3));

        // Test 10.14
        MyDate d1 = new MyDate();
        MyDate d2 = new MyDate(34355555133101L);
        System.out.println("10.14: " + d1.getYear() + "-" + d1.getMonth() + "-" + d1.getDay() + ", " +
                          d2.getYear() + "-" + d2.getMonth() + "-" + d2.getDay());

        // Test 10.15
        double[][] points = {{1.0, 2.5}, {3, 4}, {5, 6}, {7, 8}, {9, 10}};
        MyRectangle2D rect = getRectangle(points);
        System.out.println("10.15 Center: (" + rect.x + ", " + rect.y + "), Width: " + rect.width + ", Height: " + rect.height);

        // Test 10.16
        System.out.println("10.16 First 10 numbers with 50 digits divisible by 2 or 3:");
        divisibleBy2Or3();

        // Test 10.17
        System.out.println("10.17 First 10 square numbers > Long.MAX_VALUE:");
        squareNumbers();

        // Test 10.18
        System.out.println("10.18 Five primes > Long.MAX_VALUE:");
        largePrimes();

        // Test 10.19
        System.out.println("10.19 Mersenne primes:");
        mersennePrimes();

        // Test 10.20
        System.out.println("10.20 Approximate e:");
        approximateE();

        // Test 10.21
        System.out.println("10.21 First 10 numbers > Long.MAX_VALUE divisible by 5 or 6:");
        divisibleBy5Or6();

        // Test 10.22
        MyString1 ms1 = new MyString1("Hello".toCharArray());
        System.out.println("10.22: " + ms1.toLowerCase().toString());

        // Test 10.23
        MyString2 ms2 = new MyString2("Hello");
        System.out.println("10.23: " + ms2.toUpperCase().s);

        // Test 10.24
        MyCharacter mc = new MyCharacter('5');
        System.out.println("10.24: isDigit('5'): " + MyCharacter.isDigit(mc.charValue()));

        // Test 10.25
        System.out.println("10.25 Split: " + Arrays.toString(split("ab#12#453", "#")));

        // Test 10.26
        System.out.println("10.26 Calculate '3 + 4': " + calculate("3 + 4"));

        // Test 10.27
        MyStringBuilder1 msb1 = new MyStringBuilder1("Hello");
        System.out.println("10.27: " + msb1.append(123).toString());

        // Test 10.28
        MyStringBuilder2 msb2 = new MyStringBuilder2("Hello");
        System.out.println("10.28: " + msb2.reverse().toString());
    }
}
